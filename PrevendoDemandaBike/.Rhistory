bikes <- read.csv("bikes.csv", header = TRUE, stringAsFactors = FALSE)
bikes <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
bikes <- bikes[, cols]
head(bikes$dteday)
source("Tools.R")
bikes$dteday <- char.toPOSIXct(bikes)
head(bikes$dteday)
?scale
newf <- scale(bikes[, cols])
newf[, cols] <- scale(bikes[, cols])
bikes[, cols] <- scale(bikes[, cols])
bikes[, cols]
bikes[4, cols]
cols <- c("temp", "hum", "windspeed")
bikes[4, cols]
frm  <- scale(bikes[, cols])
head(frm)
bikes[, cols]
head(frm)
head(bikes[, cols])
head(frm)
bikes[, cols] <- scale(bikes[, cols])
str(bikes)
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
bikes <- month.count(bikes)
head(bikes)
#tail(bikes)
tail(bikes)
bikes$dayWeek <- base::as.factor(base::weekdays(bikes$dteday))
head(bikes)
bikes$dayWeek <- base::as.numeric(base::ordered(bikes$dayWeek),
levels = c("Monday","Tuesday","Wednesday"
,"Thursday","Friday","Saturday","Sunday"))
head(bikes)
tail(bikes)
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
### Transforma os valores de hora na madrugada, quando a demana e praticamente nula
bikes$xformHr <- ifelse(bikes$hr >4, bikes$hr - 5, bikes$hr + 19)
### Adiciona uma variavel com os valores unicos para o horario do dia para dias da semana e fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xFormHr, bikes$xformHr + 24)
### Transforma os valores de hora na madrugada, quando a demana e praticamente nula
bikes$xformHr <- ifelse(bikes$hr >4, bikes$hr - 5, bikes$hr + 19)
### Adiciona uma variavel com os valores unicos para o horario do dia para dias da semana e fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
head(bikes)
head(bikes)
bikes
bikes
View(bikes)
Azure <- FALSE
if(Azure) {
source("src/Tools.R")
bikes <- maml.mapInputPort(1)
bikes$dteday <- set.asPOSIXct(bikes)
} else {
source("Tools.R")
bikes <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikes <- bikes[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikes$dteday <- char.toPOSIXct(bikes)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
}
### Criar um nova variavel para indicar dia da semana
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
### Adicionando coluna com a quantidade de meses, para utilizar no modelo
bikes <- month.count(bikes)
#head(bikes)
#tail(bikes)
### Criar um fator ordenado para o dia da semana
bikes$dayWeek <- base::as.factor(base::weekdays(bikes$dteday))
bikes$dayWeek <- base::as.numeric(base::ordered(bikes$dayWeek),
levels = c("Monday","Tuesday","Wednesday"
,"Thursday","Friday","Saturday","Sunday"))
### Adiciona variavel com valores unicos para o h orario do dia para dias da semana e fim de semana
### Com isso diferenciamos as horas dos dias da semana das fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
### Transforma os valores de hora na madrugada, quando a demana e praticamente nula
bikes$xformHr <- ifelse(bikes$hr >4, bikes$hr - 5, bikes$hr + 19)
### Adiciona uma variavel com os valores unicos para o horario do dia para dias da semana e fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
bikes
bikes$count <- bikes$cnt - predict(lm(cnt ~ dteday, data = bikes), newdata = bikes)
View(bikes)
bikes$count <- NULL
View(bikes)
linearM <- lm(cnt ~ dteday, data = bikes)
summary(linearM)
plot(bikes$dteday, bikes$cnt)
hist(bikes$dteday, bikes$cnt)
barplot(bikes$cnt)
barplot(bikes$cnt, names = bikes$dteday)
barplot(bikes$cnt, names = bikes$hr)
bikesPerHour <- stats::aggregate(cnt ~ hr, bikes, sum)
head(bikesPerHour)
bikesPerHour <- stats::aggregate(cnt ~ hr, bikes, mean)
barplot(bikes$cnt, names = bikes$hr)
barplot(bikesPerHour$cnt, names = bikesPerHour$hr)
bikesPerHour <- stats::aggregate(cnt ~ hr, bikes, sum)
barplot(bikesPerHour$cnt, names = bikesPerHour$hr)
bikesPerHour <- stats::aggregate(cnt ~ hr, bikes, sum)
barplot(bikesPerHour$cnt, names = bikesPerHour$hr)
bikesPerHour <- stats::aggregate(cnt ~ hr, bikes, mean)
barplot(bikesPerHour$cnt, names = bikesPerHour$hr)
View(bikes)
bikesPerHour <- stats::aggregate(cnt, workingday ~ hr, bikes, mean)
bikesPerHour <- stats::aggregate([cnt, workingday] ~ hr, bikes, mean)
plot(bikesPerHour$cnt, bikesPerHour$hr)
plot(bikesPerHour$hr, bikesPerHour$cnt)
barplot(bikesPerHour$cnt, names = bikesPerHour$hr)
linearM <- lm(cnt ~ dteday, data = bikes) # summary(linearM)
summary(linearM)
prediction <- predict(linearM, newdata = bikes)
summary(prediction)
summary(prediction)
head(prediction)
# head(bikes)
head(bikes)
head(bikes$cnt)
countAndPredict = c(bikes$cnt, prediction)
head(countAndPredict)
countAndPredict = data.frame(cols(c(bikes$cnt, prediction)))
countAndPredict = data.frame(bikes$cnt, prediction)
head(countAndPredict)
countAndPredict = data.frame(bikes$cnt, prediction, colnames(c("BikesCount", "Prediction")))
countAndPredict = data.frame(BikesCount = bikes$cnt, Prediction = prediction) # head(countAndPredict)
head(countAndPredict)
source('~/OneDrive/Desenvolvimento/R/GitHub/PrevendoDemandaBike/02-Analise Exploratoria de Dados1.R', encoding = 'UTF-8', echo=TRUE)
head(countAndPredict)
bikes$count <- bikes$cnt - prediction # head(bikes$cnt)
cols <- c("mnth", "hr", "holiday", "workingday",
"weathersit", "temp", "hum", "windspeed",
"isWorking", "monthCount", "dayWeek",
"workTime", "xformHr", "count")
# Metodos de Correlacao
# Pearson - coeficiente usado para medir o grau de relacionamento entre duas variaveis com relacao linear
# Spearman - eh um teste nao parametrico, para medir o grau de relacionamento entre duas variaveis
# Kendall - eh um teste nao parametrico, para medir a forca de dependencia entre duas variaveis
metodos <- c("pearson", "spearman")
cors <- lapply( metodos, function(method)
(cor(bikes[, cols], method = method)))
head(cors)
head(cors)
head(cors)
labels <- c("Demanda de Bikes vs Temperatura",
"Demanda de Bikes vs Humidade",
"Demanda de Bikes vs Velocidade do Vento",
"Demanda de Bikes vs Hora")
labels <- list("Box plots - Demanda por Bikes as 09:00 para \n dias da semana e fins de semana",
"Box plots - Demanda por Bikes as 18:00  para \n dias da semana e fins de semana")
Times <- list(9, 18)
labels <- c("Demanda de Bikes vs Temperatura",
"Demanda de Bikes vs Humidade",
"Demanda de Bikes vs Velocidade do Vento",
"Demanda de Bikes vs Hora")
xAxis <- c("temp", "hum", "windspeed", "hr")
plot.scatter <- function(X, label){
ggplot(bikes, aes_string(x = X, y = "cnt")) +
geom_point(aes_string(colour = "cnt"), alpha = 0.1) +
scale_colour_gradient(low = "green", high = "blue") +
geom_smooth(method = "loess") +
ggtitle(label) +
theme(text = element_text(size = 20)) }
Map(plot.scatter, xAxis, labels)
require(ggplot2)
plot.scatter <- function(X, label){
ggplot(bikes, aes_string(x = X, y = "cnt")) +
geom_point(aes_string(colour = "cnt"), alpha = 0.1) +
scale_colour_gradient(low = "green", high = "blue") +
geom_smooth(method = "loess") +
ggtitle(label) +
theme(text = element_text(size = 20)) }
Map(plot.scatter, xAxis, labels)
dim(bikes)
require(randomForest)
# Avalidando a importÃ¢ncia de todas as variaveis
modelo <- randomForest(cnt ~ . ,
data = bikes,
ntree = 100, nodesize = 10,
importance = TRUE)
any(is.na(bikes))
bikes <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikes <- bikes[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikes$dteday <- char.toPOSIXct(bikes)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
### Adicionando coluna com a quantidade de meses, para utilizar no modelo
bikes <- month.count(bikes)
#head(bikes)
#tail(bikes)
### Criar um fator ordenado para o dia da semana
bikes$dayWeek <- base::as.factor(base::weekdays(bikes$dteday))
bikes$dayWeek <- base::as.numeric(base::ordered(bikes$dayWeek),
levels = c("Monday","Tuesday","Wednesday"
,"Thursday","Friday","Saturday","Sunday"))
### Adiciona variavel com valores unicos para o h orario do dia para dias da semana e fim de semana
### Com isso diferenciamos as horas dos dias da semana das fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
### Transforma os valores de hora na madrugada, quando a demana e praticamente nula
bikes$xformHr <- ifelse(bikes$hr >4, bikes$hr - 5, bikes$hr + 19)
### Adiciona uma variavel com os valores unicos para o horario do dia para dias da semana e fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
# Verificando qts bikes sao alugadas por hora
bikesPerHour <- stats::aggregate([cnt, workingday] ~ hr, bikes, mean)
barplot(bikesPerHour$cnt, names = bikesPerHour$hr)
bikesPerHour <- stats::aggregate(cnt ~ hr, bikes, mean)
bikesPerHour <- stats::aggregate(cnt ~ hr, bikes, mean)
barplot(bikesPerHour$cnt, names = bikesPerHour$hr)
head(bikesPerHour)
any(is.na(bikes))
str(bikes)
summary(bikes)
source("Tools.R")
bikes <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikes <- bikes[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikes$dteday <- char.toPOSIXct(bikes)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
source("Tools.R")
bikes <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikes <- bikes[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikes$dteday <- char.toPOSIXct(bikes)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
source("Tools.R")
bikes <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
### criando subset de dados
bikes <- bikes[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikes$dteday <- char.toPOSIXct(bikes)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
source("Tools.R")
bikes <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikes <- bikes[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikes$dteday <- char.toPOSIXct(bikes)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikes[, cols] <- scale(bikes[, cols])
any(is.na(bikes))
summary(bikes)
request("tydr")
require("tydr")
source("Tools.R")
bikesOriginal <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikesOriginal <- bikesOriginal[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikesOriginal$dteday <- char.toPOSIXct(bikes)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikesOriginal[, cols] <- scale(bikesOriginal[, cols])
} else {
source("Tools.R")
bikesOriginal <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikesOriginal <- bikesOriginal[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikesOriginal$dteday <- char.toPOSIXct(bikesOriginal)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikesOriginal[, cols] <- scale(bikesOriginal[, cols])
source("Tools.R")
bikesOriginal <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikesOriginal <- bikesOriginal[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikesOriginal$dteday <- char.toPOSIXct(bikesOriginal)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikesOriginal[, cols] <- scale(bikesOriginal[, cols])
any(is.na(bikesOriginal))
summary(bikesOriginal)
bikes <- na.omit(bikesOriginal)
any(is.na(bikes))
summary(bikes)
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
bikes <- month.count(bikes)
#tail(bikes)
bikes$dayWeek <- base::as.factor(base::weekdays(bikes$dteday))
bikes$dayWeek <- base::as.numeric(base::ordered(bikes$dayWeek),
levels = c("Monday","Tuesday","Wednesday"
,"Thursday","Friday","Saturday","Sunday"))
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
bikes$xformHr <- ifelse(bikes$hr >4, bikes$hr - 5, bikes$hr + 19)
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
any(is.na(bikes))
library(dplyr)
bk <- dplyr::filter(data=bikesOriginal, is.na(dteday) == FALSE)
bk <- dplyr::filter(data=bikesOriginal, is.na(dteday) == FALSE)
bk <- dplyr::filter(data=bikesOriginal, is.na(bikesOriginal$dteday) == FALSE)
bk <- dplyr::filter(bikesOriginal, !is.na(dteday))
any(is.na(bikesOriginal))
any(is.na(bk))
### Criar um nova variavel para indicar dia da semana
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
### Adicionando coluna com a quantidade de meses, para utilizar no modelo
bikes <- month.count(bikes)
#head(bikes)
#tail(bikes)
### Criar um fator ordenado para o dia da semana
bikes$dayWeek <- base::as.factor(base::weekdays(bikes$dteday))
bikes$dayWeek <- base::as.numeric(base::ordered(bikes$dayWeek),
levels = c("Monday","Tuesday","Wednesday"
,"Thursday","Friday","Saturday","Sunday"))
### Adiciona variavel com valores unicos para o h orario do dia para dias da semana e fim de semana
### Com isso diferenciamos as horas dos dias da semana das fim de semana
bikes$workTime <- ifelse(bikes$isWorking, bikes$hr, bikes$hr + 24)
### Transforma os valores de hora na madrugada, quando a demana e praticamente nula
bikes$xformHr <- ifelse(bikes$hr >4, bikes$hr - 5, bikes$hr + 19)
### Adiciona uma variavel com os valores unicos para o horario do dia para dias da semana e fim de semana
bikes$xformWorkHr <- ifelse(bikes$isWorking, bikes$xformHr, bikes$xformHr + 24)
dim(bikes)
any(is.na(bikes))
require(randomForest)
modelo <- randomForest(cnt ~ . ,
data = bikes,
ntree = 100, nodesize = 10,
importance = TRUE)
modelo <- randomForest(cnt ~ . - count
- mnth
- hr
- workingday
- isWorking
- dayWeek
- xformHr
- workTime
- holiday
- windspeed
- monthCount
- weathersit,
data = bikes,
ntree = 100, nodesize = 10,
importance = TRUE)
varImpPlot(modelo)
summary(bikes)
source("Tools.R")
bikesOriginal <- read.csv("bikes.csv", header = TRUE, stringsAsFactors = FALSE)
### selecionar as variaveis que serao usadas
cols <- c("dteday", "mnth", "hr", "holiday", "workingday", "weathersit", "temp", "hum", "windspeed", "cnt")
### criando subset de dados
bikesOriginal <- bikesOriginal[, cols]
### transcofrmar o objeto de data
#head(bikes$dteday)
bikesOriginal$dteday <- char.toPOSIXct(bikesOriginal)
### normalizar as variaveis preditoras numericas
#?scale
cols <- c("temp", "hum", "windspeed")
bikesOriginal[, cols] <- scale(bikesOriginal[, cols])
summary(bikesOriginal)
bikes <- na.omit(bikesOriginal)
bikes$isWorking <- ifelse(bikes$workingday & !bikes$holiday, 1, 0)
bikes$dayWeek <- base::as.factor(base::weekdays(bikes$dteday))
str(bikes)
base::as.factor(base::weekdays(bikes$dteday))
str(bikes$dayWeek)
table(bikes$dayWeek)
bikes$dayWeek <- base::as.numeric(base::ordered(bikes$dayWeek),
levels = c("Monday","Tuesday","Wednesday"
,"Thursday","Friday","Saturday","Sunday"))
table(bikes$dayWeek)
str(bikesOriginal)
bikes$weatherName <- base::as.factor(base::ordered(bikes$weathersit),
levels = c("Clear", "Mist", "Light Snow", "Heavy Rain"))
?as.factor
bikes$weatherName <- base::as.factor(base::ordered(bikes$weathersit),
labels = c("Clear", "Mist", "Light Snow", "Heavy Rain"))
bikes$weathersit
bikes$weatherName <- base::as.factor(levels = c(1,2,3,4),
labels = c("Clear", "Mist", "Light Snow", "Heavy Rain"))
bikes$weatherName <- base::as.factor(bikes$weathersit,
levels = c(1,2,3,4),
labels = c("Clear", "Mist", "Light Snow", "Heavy Rain"))
attributes(bikes$weathersit)
table(bikes$weathersit)
bikes$weatherName <- factor(bikes$weathersit,
levels = c(1,2,3,4),
labels = c("Clear", "Mist", "Light Snow", "Heavy Rain"))
bikes$weatherName
str(bikes$weatherName)
summary(bikes$weatherName)
is.ordered(bikes$weatherName)
as.numeric(bikes$weatherName)
str(bikes)
plot(bikes$cnt~bikes$weatherName)
barplot(bikes$cnt~bikes$weatherName)
barplot(bikes$weatherName)
barplot(bikes$weatherName)
barplot(c)
c<-table(bikes$weatherName)
barplot(c)
c<-table(bikes$weatherName, bikes$cnt)
barplot(c)
c
barplot(c, legend = rownames(c))
