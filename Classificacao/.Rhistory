table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, perc.under = 100)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.over = 100)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.over = 120)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.over = 150)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.under = 150)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.under = 100)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.under = 200)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.under = 150)
table(credito$CreditStatus)
table(balancedCredit$CreditStatus)
table(balancedCredit$CreditStatus)
modelo <- randomForest(CreditStatus ~,
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_F
- OtherInstalments,
data = balancedCredit,
ntree = 100, nodesize = 10, importance = TRUE)
varImpPlot(modelo)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_F
- OtherInstalments,
data = balancedCredit,
ntree = 100, nodesize = 10, importance = TRUE)
library(randomForest)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_F
- OtherInstalments,
data = balancedCredit,
ntree = 100, nodesize = 10, importance = TRUE)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_F
- OtherInstalments,
data = balancedCredit,
ntree = 100, nodesize = 10, importance = TRUE)
credito$CreditStatus = factor(credito$CreditStatus, levels = c(1,2) , labels = c("Bom Pagador", "Mau Pagador"))
#pie(table(credito$CreditStatus))
#ggplot(credito, aes_string("Purpose")) + geom_bar() + facet_grid(. ~ CreditStatus)
#head(credito$CreditStatus)
CreateGroups <- function(x, nlevs = 5, maxval = 1000, minval = 0, isOrdered = TRUE){
cuts <- seq(min(x), max(x), length.out = nlevs + 1)
cuts[1] <- minval
cuts[nlevs + 1] <- maxval
#print(cuts)
groups <- cut(x, breaks = cuts, order_result = isOrdered)
#replacedGroup <-  gsub("\\(", "\\[", groups)
#uniqueNames <- unique(replacedGroup)
#x <- factor(x = replacedGroup, labels = uniqueNames, ordered = isOrdered )
x <- groups
}
credito[,"Duration_F"]      <- CreateGroups(credito[, "Duration"], maxval = 100)
credito[,"CreditAmount_F"]  <- CreateGroups(credito[, "CreditAmount"], maxval = 1000000)
credito[,"Age_F"]           <- CreateGroups(credito[, "Age"], maxval = 100)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.under = 150)
#table(credito$CreditStatus)
#table(balancedCredit$CreditStatus)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.under = 150)
warnings()
# lendo o dataset
credito <- read.csv("credito.csv", header = FALSE)
##################################################################################
# Nomeando as colunas
##################################################################################
cNames <-
c("CheckingAcctStat",
"Duration",
"CreditHistory",
"Purpose",
"CreditAmount",
"SavingsBonds",
"Employment",
"InstallmentRatePecnt",
"SexAndStatus",
"OtherDetorsGuarantors",
"PresentResidenceTime",
"Property",
"Age",
"OtherInstalments",
"Housing",
"ExistingCreditsAtBank",
"Job",
"NumberDependents",
"Telephone",
"ForeignWorker",
"CreditStatus")
colnames(credito) <- cNames
credito$CreditStatus = factor(credito$CreditStatus, levels = c(1,2) , labels = c("Bom Pagador", "Mau Pagador"))
#pie(table(credito$CreditStatus))
#ggplot(credito, aes_string("Purpose")) + geom_bar() + facet_grid(. ~ CreditStatus)
#head(credito$CreditStatus)
## Funcao para valores em grupos
CreateGroups <- function(x, nlevs = 5, maxval = 1000, minval = 0, isOrdered = TRUE){
cuts <- seq(min(x), max(x), length.out = nlevs + 1)
cuts[1] <- minval
cuts[nlevs + 1] <- maxval
#print(cuts)
groups <- cut(x, breaks = cuts, order_result = isOrdered)
#replacedGroup <-  gsub("\\(", "\\[", groups)
#uniqueNames <- unique(replacedGroup)
#x <- factor(x = replacedGroup, labels = uniqueNames, ordered = isOrdered )
x <- groups
}
credito[,"Duration_F"]      <- CreateGroups(credito[, "Duration"], maxval = 100)
credito[,"CreditAmount_F"]  <- CreateGroups(credito[, "CreditAmount"], maxval = 1000000)
credito[,"Age_F"]           <- CreateGroups(credito[, "Age"], maxval = 100)
head(credito)
str(credito)
balancedCredit <- DMwR::SMOTE(CreditStatus ~ ., credito, k = 2, perc.under = 150)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_F
- OtherInstalments,
data = balancedCredit,
ntree = 100, nodesize = 10, importance = TRUE)
varImpPlot(modelo)
summary(modelo)
table(credito$CreditStatus)
splitData <- function(dataframe, seed = NULL) {
if(!isnull(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainIndex <- sample(index, trunc(length(index)/2))
trainSet <- dataframe[trainIndex, ]
testSet <- dataframe[-trainIndex, ]
list(trainSet = trainSet, testSet = testSet)
}
splitData <- function(dataframe, seed = NULL) {
if(!isnull(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainIndex <- sample(index, trunc(length(index)/2))
trainSet <- dataframe[trainIndex, ]
testSet <- dataframe[-trainIndex, ]
list(trainSet = trainSet, testSet = testSet)
}
splits <- splitData(credito, seed = 808)
splitData <- function(dataframe, seed = NULL) {
if(!is.null(seed)) set.seed(seed)
index <- 1:nrow(dataframe)
trainIndex <- sample(index, trunc(length(index)/2))
trainSet <- dataframe[trainIndex, ]
testSet <- dataframe[-trainIndex, ]
list(trainSet = trainSet, testSet = testSet)
}
splits <- splitData(credito, seed = 808)
head(splits)
str(splits)
nrow(splits$trainSet)
nrow(splits$testSet)
table(credito$CreditStatus)
modelo <- randomForest(CreditStatus ~ .
- Duration
- Age
- CreditAmount
- ForeignWorker
- NumberDependents
- Telephone
- ExistingCreditsAtBank
- PresentResidenceTime
- Job
- Housing
- SexAndStatus
- InstallmentRatePecnt
- OtherDetorsGuarantors
- Age_F
- OtherInstalments,
data = balancedCredit,
ntree = 100, nodesize = 10, importance = TRUE)
varImpPlot(modelo)
splits <- splitData(balancedCredit, seed = 808)
nrow(splits$trainSet)
nrow(splits$testSet)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
set.seed(808)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
set.seed(808)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
set.seed(808)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = splits$trainSet,
ntree = 100, nodesize = 10)
print(modelo)
resultadoPrevisto <- data.frame(actual = balancedCredit$CreditStatus,
previsto = predict(modelo, newdata = splits$testSet))
dadosTeste <- splits$testSet
dadosTreino <- splits$trainSet
set.seed(808)
modelo <- randomForest(CreditStatus ~
CheckingAcctStat
+ CreditHistory
+ Duration_F
+ Property
+ Purpose
+ Employment
+ CreditAmount_F,
data = dadosTreino,
ntree = 100, nodesize = 10)
print(modelo)
resultadoPrevisto <- data.frame(actual = balancedCredit$CreditStatus,
previsto = predict(modelo, newdata = dadosTeste))
predict(modelo, newdata = dadosTeste)
predict(modelo, newdata = dadosTeste)
balancedCredit$CreditStatus
data.frame(actual = balancedCredit$CreditStatus,
previsto = predict(modelo, newdata = dadosTeste))
predict(modelo, newdata = dadosTeste)
alturas <- c(176, 154, 138, 196, 132, 176, 181, 169, 150, 175)
pesos <- c(82,49,53,112,47,69,77,71,62, 78)
plot(pesos, alturas)
modelo <- lm(altura ~ pesos)
modelo <- lm(alturas ~ pesos)
modelo
summary(modelo)
predict(modelo)
escola <-data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),Matemática = c(90, 80, 85, 87, 56, 79),Geografia = c(100, 78, 86, 90, 98, 67),Química = c(76, 56, 89, 90, 100, 87))
escola
mean(escola)
mean(escola[,2:4])
mean(escola[,2:3])
mean(escola[,2])
mean(escola[,1:3])
mean(escola[,2:3])
mean(escola[,2:3])
colMeans(escola)
apply(escola, 2, mean)
escola[,2:4]
class(escola[,2:4])
mean(escola[,2:4])
apply(escola[,2:4],2,mean)
apply(escola[,2:4],2,sum)
colSums(escola[,2:4])
rowSums(escola[,2:4])
escola$SomaMaterias <- apply(escola[,2:4], 1, sum)
escola
escola$MediaNotas <- apply(escola[,2:4], 1, mean)
escola
escola$SomaMaterias <- escola$Matemática + escola$Geografia
escola
escola[, sum(c(2:4)), by = Aluno]
escola[, sum(c(2:4)), by = A]
class(escola)
escola <- data.table::as.data.table(escola)
class(escola)
escola
escola[, sum(c(2:4)), by = Aluno]
escola[, sum(Matemática, Geografia, Química), by = Aluno]
escola[, mean(Matemática, Geografia, Química), by = Aluno]
escola$MediaNotas <- apply(escola[,2:4], 1, mean)
escola$MediaNotas <- sapply(escola[,2:4], 1, mean)
